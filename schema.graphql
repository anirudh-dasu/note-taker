# Autogenerated input type of changePassword
input changePasswordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  change_password: changePasswordInputType
}

# Input object type for changing password of a user
input changePasswordInputType {
  current_password: String!
  password: String!
  password_confirmation: String!
}

# Autogenerated return type of changePassword
type changePasswordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  user: User
}

# Autogenerated input type of createNote
input createNoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  title: String!
  content: String
  kind: String
  tags: [tagInputType]
}

# Autogenerated return type of createNote
type createNotePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  note: Note
}

# Autogenerated input type of createTag
input createTagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  title: String!
}

# Autogenerated return type of createTag
type createTagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tag: Tag
}

# Autogenerated input type of destroyAccount
input destroyAccountInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of destroyNote
input destroyNoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated input type of destroyTag
input destroyTagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated input type of editNote
input editNoteInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  content: String
  kind: String
  tags: [tagInputType]
}

# Autogenerated return type of editNote
type editNotePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  note: Note
}

# Autogenerated input type of editTag
input editTagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  title: String!
}

# Autogenerated return type of editTag
type editTagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  tag: Tag
}

# Information about field that did not pass validation
type FieldError {
  # Field name that caused these errors
  field: String

  # Validation message
  message: String!
}

type Mutation {
  # Change user password
  changePassword(input: changePasswordInput!): changePasswordPayload

  # Create a note for the user
  createNote(input: createNoteInput!): createNotePayload

  # Create a tag for the user
  createTag(input: createTagInput!): createTagPayload

  # Destroy user account
  deleteAccount(input: destroyAccountInput!): Boolean

  # Destroy a note of the user
  destroyNote(input: destroyNoteInput!): Boolean

  # Destroy a tag of the user
  destroyTag(input: destroyTagInput!): Boolean

  # edit a note of the user
  editNote(input: editNoteInput!): editNotePayload

  # Edit an existing tag for the user
  editTag(input: editTagInput!): editTagPayload

  # Remove tag from this note
  removeTag(input: removeTagInput!): removeTagPayload

  # Sign in a user
  signIn(input: signInInput!): signInPayload

  # Sign out a user
  signOut(input: signOutInput!): Boolean

  # User sign up
  signUp(input: signUpInput!): signUpPayload

  # Update user information
  updateUser(input: updateUserInput!): updateUserPayload
}

# A note with tags and an author 
type Note {
  # Author of this note
  author: User
  content: String
  created_at: String
  id: ID!
  kind: String
  slug: String

  # All tags association with this note
  tags: [Tag]
  title: String
  updated_at: String
  url: String
}

# The query root of this schema. See available queries.
type Query {
  # Fetch a note by ID
  note(id: ID!): Note

  # Fetch paginated notes collection of the current user
  notes(offset: Int = 0, tag: String = "", keyword: String = ""): [Note]

  # Fetch the number of posts of current user
  notesCount: Int

  # Fetch a tag by ID
  tag(id: ID!): Tag

  # Fetch paginated tags collection of the current user
  tags(offset: Int = 0, note_id: ID = null): [Tag]

  # Return the current user
  user: User
}

# Autogenerated input type of removeTag
input removeTagInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
  tag_id: ID!
}

# Autogenerated return type of removeTag
type removeTagPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  note: Note
}

# Autogenerated input type of signIn
input signInInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  sign_in: signInInputType
}

# Input object type for signing in a user
input signInInputType {
  email: String!
  password: String
  provider: String
  uid: String
  device_type: String!
  device_id: String!
}

# Autogenerated return type of signIn
type signInPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  user: User
  user_device: UserDevice
}

# Autogenerated input type of signOut
input signOutInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of signUp
input signUpInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  sign_up: signUpInputType
}

# Input object type for signing up a new user
input signUpInputType {
  username: String
  email: String!
  password: String!
  password_confirmation: String!
  provider: String
  uid: String
  device_type: String!
  device_id: String!
}

# Autogenerated return type of signUp
type signUpPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  user: User
}

# Tags created by users for notes
type Tag {
  created_at: String
  id: ID!

  # All notes association with this tag.
  notes: [Note]
  slug: String
  title: String
  updated_at: String

  # All users who use this tag.
  users: [User]
}

# Input for creating tag
input tagInputType {
  title: String!
}

# Autogenerated input type of updateUser
input updateUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  username: String!
}

# Autogenerated return type of updateUser
type updateUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  messages: [FieldError]
  user: User
}

# A user who can create notes and tags
type User {
  created_at: String
  email: String
  id: ID!

  # All notes association with this user.
  notes: [Note]

  # All tags association with this user.
  tags: [Tag]
  updated_at: String

  # All user_devices association with this user.
  user_devices: [UserDevice]
  username: String
}

# Each device belonging to a user
type UserDevice {
  created_at: String
  device_id: String
  device_type: String
  id: ID!
  jwt: String
  provider: String
  uid: String
  updated_at: String

  # Owner of this device
  user: User
}

